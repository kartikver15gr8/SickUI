{
  "title": "Circular Progress",
  "description": "A circular progress indicator with smooth animations and customizable styling.",
  "published": true,
  "component": true,
  "toc": true,
  "body": {
    "raw": "\n## Installation\n\nInstall via CLI:\n\n```bash\nnpx @sickui/cli add circular-progress\n```\n\n### Manual Installation\n\nIf you prefer to install manually, copy and paste the following code into your project.\n\n```bash\nnpm install framer-motion class-variance-authority clsx tailwind-merge\n```\n\n## Usage\n\n<ComponentPreview name=\"circular-progress-default\" code={`import { CircularProgress } from \"@sickui/core\";\n\nexport default function Example() {\n  return <CircularProgress value={75} />;\n}`}>\n  <CircularProgressDefault />\n</ComponentPreview>\n\n## Size Variants\n\nUse the `size` prop to change the size of the circular progress indicator.\n\n<ComponentPreview name=\"circular-progress-sizes\" code={`import { CircularProgress } from \"@sickui/core\";\n\nexport default function CircularProgressSizes() {\n  return (\n    <div className=\"flex items-center gap-8\">\n      <div className=\"flex flex-col items-center gap-2\">\n        <CircularProgress value={40} size=\"sm\" />\n        <span className=\"text-sm text-muted-foreground\">Small</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <CircularProgress value={65} size=\"default\" />\n        <span className=\"text-sm text-muted-foreground\">Default</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <CircularProgress value={85} size=\"lg\" />\n        <span className=\"text-sm text-muted-foreground\">Large</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <CircularProgress value={90} size=\"xl\" />\n        <span className=\"text-sm text-muted-foreground\">Extra Large</span>\n      </div>\n    </div>\n  );\n}`}>\n  <CircularProgressSizes />\n</ComponentPreview>\n\n## Stroke Width\n\nCustomize the thickness of the progress ring using the `strokeWidth` prop.\n\n<ComponentPreview name=\"circular-progress-strokes\" code={`import { CircularProgress } from \"@sickui/core\";\n\nexport default function CircularProgressStrokes() {\n  return (\n    <div className=\"flex items-center gap-8\">\n      <div className=\"flex flex-col items-center gap-2\">\n        <CircularProgress value={60} strokeWidth={2} />\n        <span className=\"text-sm text-muted-foreground\">Thin (2px)</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <CircularProgress value={70} strokeWidth={6} />\n        <span className=\"text-sm text-muted-foreground\">Default (6px)</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <CircularProgress value={80} strokeWidth={10} />\n        <span className=\"text-sm text-muted-foreground\">Thick (10px)</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <CircularProgress value={90} strokeWidth={14} />\n        <span className=\"text-sm text-muted-foreground\">Extra Thick (14px)</span>\n      </div>\n    </div>\n  );\n}`}>\n  <CircularProgressStrokes />\n</ComponentPreview>\n\n## Animated Progress\n\nCreate smooth animated progress indicators with real-time updates.\n\n<ComponentPreview name=\"circular-progress-animated\" code={`\"use client\";\n\nimport { CircularProgress } from \"@sickui/core\";\nimport { useState, useEffect } from \"react\";\n\nexport default function CircularProgressAnimated() {\n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setProgress((prev) => (prev >= 100 ? 0 : prev + 1));\n    }, 50);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"flex items-center gap-8\">\n      <div className=\"flex flex-col items-center gap-2\">\n        <CircularProgress value={progress} duration={0.1} />\n        <span className=\"text-sm text-muted-foreground\">Animated Progress</span>\n      </div>\n    </div>\n  );\n}`}>\n  <CircularProgressAnimated />\n</ComponentPreview>\n\n## Value Display\n\nControl whether to show the percentage value using the `showValue` prop.\n\n<ComponentPreview name=\"circular-progress-no-value\" code={`import { CircularProgress } from \"@sickui/core\";\n\nexport default function CircularProgressNoValue() {\n  return (\n    <div className=\"flex items-center gap-8\">\n      <div className=\"flex flex-col items-center gap-2\">\n        <CircularProgress value={45} showValue={false} />\n        <span className=\"text-sm text-muted-foreground\">No Value Display</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <CircularProgress value={75} showValue={true} />\n        <span className=\"text-sm text-muted-foreground\">With Value Display</span>\n      </div>\n    </div>\n  );\n}`}>\n  <CircularProgressNoValue />\n</ComponentPreview>\n\n## Loading States\n\nPerfect for showing loading progress in applications.\n\n<ComponentPreview name=\"circular-progress-loading\" code={`\"use client\";\n\nimport { CircularProgress } from \"@sickui/core\";\nimport { useState, useEffect } from \"react\";\n\nexport default function CircularProgressLoading() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    if (isLoading) {\n      const interval = setInterval(() => {\n        setProgress((prev) => {\n          if (prev >= 100) {\n            setIsLoading(false);\n            return 100;\n          }\n          return prev + 2;\n        });\n      }, 100);\n\n      return () => clearInterval(interval);\n    }\n  }, [isLoading]);\n\n  const handleReset = () => {\n    setProgress(0);\n    setIsLoading(true);\n  };\n\n  return (\n    <div className=\"flex flex-col items-center gap-4\">\n      <CircularProgress value={progress} size=\"lg\" />\n      <div className=\"flex gap-2\">\n        <button\n          onClick={handleReset}\n          className=\"px-4 py-2 bg-primary text-primary-foreground rounded-md text-sm hover:bg-primary/90\"\n        >\n          {isLoading ? \"Loading...\" : \"Reset\"}\n        </button>\n      </div>\n    </div>\n  );\n}`}>\n  <CircularProgressLoading />\n</ComponentPreview>\n\n## API Reference\n\n### CircularProgress\n\n| Prop          | Type                                    | Default     | Description                                                    |\n| ------------- | --------------------------------------- | ----------- | -------------------------------------------------------------- |\n| `value`       | `number`                                | -           | The progress value (0-100)                                     |\n| `size`        | `\"sm\" \\| \"default\" \\| \"lg\" \\| \"xl\"`     | `\"default\"` | The size of the circular progress indicator                    |\n| `strokeWidth` | `number`                                | `6`         | The width of the progress ring stroke                          |\n| `showValue`   | `boolean`                               | `true`      | Whether to display the percentage value in the center         |\n| `duration`    | `number`                                | `1`         | Animation duration in seconds for progress changes            |\n| `className`   | `string`                                | -           | Additional CSS classes to apply to the component              |\n\nThe component also accepts all standard HTML `div` attributes.\n\n## Accessibility\n\nThe CircularProgress component includes built-in accessibility features:\n\n- **ARIA attributes**: Proper `role` and `aria-*` attributes for screen readers\n- **Semantic structure**: Uses semantic HTML elements where appropriate\n- **Keyboard navigation**: Focusable when interactive\n- **Screen reader support**: Progress value is announced to assistive technologies\n- **High contrast**: Respects system color preferences and theme settings\n\n## Examples in the Wild\n\nHere are some common use cases for the CircularProgress component:\n\n### File Upload Progress\n```tsx\n<CircularProgress \n  value={uploadProgress} \n  size=\"lg\" \n  strokeWidth={8}\n/>\n```\n\n### Loading Spinner\n```tsx\n<CircularProgress \n  value={loadingProgress} \n  showValue={false}\n  duration={0.5}\n/>\n```\n\n### Dashboard Metrics\n```tsx\n<div className=\"grid grid-cols-3 gap-4\">\n  <CircularProgress value={85} size=\"sm\" />\n  <CircularProgress value={92} size=\"sm\" />\n  <CircularProgress value={78} size=\"sm\" />\n</div>\n```\n\n### Skill Level Indicators\n```tsx\n<CircularProgress \n  value={skillLevel} \n  size=\"xl\" \n  strokeWidth={12}\n/>\n```\n",
    "code": "var Component=(()=>{var v=Object.create;var t=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var P=(s,e)=>()=>(e||s((e={exports:{}}).exports,e),e.exports),C=(s,e)=>{for(var i in e)t(s,i,{get:e[i],enumerable:!0})},u=(s,e,i,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of N(e))!k.call(s,a)&&a!==i&&t(s,a,{get:()=>e[a],enumerable:!(c=x(e,a))||c.enumerable});return s};var L=(s,e,i)=>(i=s!=null?v(b(s)):{},u(e||!s||!s.__esModule?t(i,\"default\",{value:s,enumerable:!0}):i,s)),y=s=>u(t({},\"__esModule\",{value:!0}),s);var m=P((I,g)=>{g.exports=_jsx_runtime});var z={};C(z,{default:()=>f,frontmatter:()=>w});var r=L(m()),w={title:\"Circular Progress\",description:\"A circular progress indicator with smooth animations and customizable styling.\",component:!0};function p(s){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",table:\"table\",tbody:\"tbody\",td:\"td\",th:\"th\",thead:\"thead\",tr:\"tr\",ul:\"ul\",...s.components},{CircularProgressAnimated:i,CircularProgressDefault:c,CircularProgressLoading:a,CircularProgressNoValue:o,CircularProgressSizes:d,CircularProgressStrokes:h,ComponentPreview:n}=e;return i||l(\"CircularProgressAnimated\",!0),c||l(\"CircularProgressDefault\",!0),a||l(\"CircularProgressLoading\",!0),o||l(\"CircularProgressNoValue\",!0),d||l(\"CircularProgressSizes\",!0),h||l(\"CircularProgressStrokes\",!0),n||l(\"ComponentPreview\",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h2,{id:\"installation\",children:[(0,r.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#installation\",children:(0,r.jsx)(e.span,{className:\"icon icon-link\"})}),\"Installation\"]}),`\n`,(0,r.jsx)(e.p,{children:\"Install via CLI:\"}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-bash\",children:`npx @sickui/cli add circular-progress\n`})}),`\n`,(0,r.jsxs)(e.h3,{id:\"manual-installation\",children:[(0,r.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#manual-installation\",children:(0,r.jsx)(e.span,{className:\"icon icon-link\"})}),\"Manual Installation\"]}),`\n`,(0,r.jsx)(e.p,{children:\"If you prefer to install manually, copy and paste the following code into your project.\"}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-bash\",children:`npm install framer-motion class-variance-authority clsx tailwind-merge\n`})}),`\n`,(0,r.jsxs)(e.h2,{id:\"usage\",children:[(0,r.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#usage\",children:(0,r.jsx)(e.span,{className:\"icon icon-link\"})}),\"Usage\"]}),`\n`,(0,r.jsx)(n,{name:\"circular-progress-default\",code:`import { CircularProgress } from \"@sickui/core\";\n\nexport default function Example() {\nreturn <CircularProgress value={75} />;\n}`,children:(0,r.jsx)(c,{})}),`\n`,(0,r.jsxs)(e.h2,{id:\"size-variants\",children:[(0,r.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#size-variants\",children:(0,r.jsx)(e.span,{className:\"icon icon-link\"})}),\"Size Variants\"]}),`\n`,(0,r.jsxs)(e.p,{children:[\"Use the \",(0,r.jsx)(e.code,{children:\"size\"}),\" prop to change the size of the circular progress indicator.\"]}),`\n`,(0,r.jsx)(n,{name:\"circular-progress-sizes\",code:`import { CircularProgress } from \"@sickui/core\";\n\nexport default function CircularProgressSizes() {\nreturn (\n  <div className=\"flex items-center gap-8\">\n    <div className=\"flex flex-col items-center gap-2\">\n      <CircularProgress value={40} size=\"sm\" />\n      <span className=\"text-sm text-muted-foreground\">Small</span>\n    </div>\n    <div className=\"flex flex-col items-center gap-2\">\n      <CircularProgress value={65} size=\"default\" />\n      <span className=\"text-sm text-muted-foreground\">Default</span>\n    </div>\n    <div className=\"flex flex-col items-center gap-2\">\n      <CircularProgress value={85} size=\"lg\" />\n      <span className=\"text-sm text-muted-foreground\">Large</span>\n    </div>\n    <div className=\"flex flex-col items-center gap-2\">\n      <CircularProgress value={90} size=\"xl\" />\n      <span className=\"text-sm text-muted-foreground\">Extra Large</span>\n    </div>\n  </div>\n);\n}`,children:(0,r.jsx)(d,{})}),`\n`,(0,r.jsxs)(e.h2,{id:\"stroke-width\",children:[(0,r.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#stroke-width\",children:(0,r.jsx)(e.span,{className:\"icon icon-link\"})}),\"Stroke Width\"]}),`\n`,(0,r.jsxs)(e.p,{children:[\"Customize the thickness of the progress ring using the \",(0,r.jsx)(e.code,{children:\"strokeWidth\"}),\" prop.\"]}),`\n`,(0,r.jsx)(n,{name:\"circular-progress-strokes\",code:`import { CircularProgress } from \"@sickui/core\";\n\nexport default function CircularProgressStrokes() {\nreturn (\n  <div className=\"flex items-center gap-8\">\n    <div className=\"flex flex-col items-center gap-2\">\n      <CircularProgress value={60} strokeWidth={2} />\n      <span className=\"text-sm text-muted-foreground\">Thin (2px)</span>\n    </div>\n    <div className=\"flex flex-col items-center gap-2\">\n      <CircularProgress value={70} strokeWidth={6} />\n      <span className=\"text-sm text-muted-foreground\">Default (6px)</span>\n    </div>\n    <div className=\"flex flex-col items-center gap-2\">\n      <CircularProgress value={80} strokeWidth={10} />\n      <span className=\"text-sm text-muted-foreground\">Thick (10px)</span>\n    </div>\n    <div className=\"flex flex-col items-center gap-2\">\n      <CircularProgress value={90} strokeWidth={14} />\n      <span className=\"text-sm text-muted-foreground\">Extra Thick (14px)</span>\n    </div>\n  </div>\n);\n}`,children:(0,r.jsx)(h,{})}),`\n`,(0,r.jsxs)(e.h2,{id:\"animated-progress\",children:[(0,r.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#animated-progress\",children:(0,r.jsx)(e.span,{className:\"icon icon-link\"})}),\"Animated Progress\"]}),`\n`,(0,r.jsx)(e.p,{children:\"Create smooth animated progress indicators with real-time updates.\"}),`\n`,(0,r.jsx)(n,{name:\"circular-progress-animated\",code:`\"use client\";\n\nimport { CircularProgress } from \"@sickui/core\";\nimport { useState, useEffect } from \"react\";\n\nexport default function CircularProgressAnimated() {\nconst [progress, setProgress] = useState(0);\n\nuseEffect(() => {\n  const interval = setInterval(() => {\n    setProgress((prev) => (prev >= 100 ? 0 : prev + 1));\n  }, 50);\n\n  return () => clearInterval(interval);\n}, []);\n\nreturn (\n  <div className=\"flex items-center gap-8\">\n    <div className=\"flex flex-col items-center gap-2\">\n      <CircularProgress value={progress} duration={0.1} />\n      <span className=\"text-sm text-muted-foreground\">Animated Progress</span>\n    </div>\n  </div>\n);\n}`,children:(0,r.jsx)(i,{})}),`\n`,(0,r.jsxs)(e.h2,{id:\"value-display\",children:[(0,r.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#value-display\",children:(0,r.jsx)(e.span,{className:\"icon icon-link\"})}),\"Value Display\"]}),`\n`,(0,r.jsxs)(e.p,{children:[\"Control whether to show the percentage value using the \",(0,r.jsx)(e.code,{children:\"showValue\"}),\" prop.\"]}),`\n`,(0,r.jsx)(n,{name:\"circular-progress-no-value\",code:`import { CircularProgress } from \"@sickui/core\";\n\nexport default function CircularProgressNoValue() {\nreturn (\n  <div className=\"flex items-center gap-8\">\n    <div className=\"flex flex-col items-center gap-2\">\n      <CircularProgress value={45} showValue={false} />\n      <span className=\"text-sm text-muted-foreground\">No Value Display</span>\n    </div>\n    <div className=\"flex flex-col items-center gap-2\">\n      <CircularProgress value={75} showValue={true} />\n      <span className=\"text-sm text-muted-foreground\">With Value Display</span>\n    </div>\n  </div>\n);\n}`,children:(0,r.jsx)(o,{})}),`\n`,(0,r.jsxs)(e.h2,{id:\"loading-states\",children:[(0,r.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#loading-states\",children:(0,r.jsx)(e.span,{className:\"icon icon-link\"})}),\"Loading States\"]}),`\n`,(0,r.jsx)(e.p,{children:\"Perfect for showing loading progress in applications.\"}),`\n`,(0,r.jsx)(n,{name:\"circular-progress-loading\",code:`\"use client\";\n\nimport { CircularProgress } from \"@sickui/core\";\nimport { useState, useEffect } from \"react\";\n\nexport default function CircularProgressLoading() {\nconst [isLoading, setIsLoading] = useState(true);\nconst [progress, setProgress] = useState(0);\n\nuseEffect(() => {\n  if (isLoading) {\n    const interval = setInterval(() => {\n      setProgress((prev) => {\n        if (prev >= 100) {\n          setIsLoading(false);\n          return 100;\n        }\n        return prev + 2;\n      });\n    }, 100);\n\n    return () => clearInterval(interval);\n  }\n}, [isLoading]);\n\nconst handleReset = () => {\n  setProgress(0);\n  setIsLoading(true);\n};\n\nreturn (\n  <div className=\"flex flex-col items-center gap-4\">\n    <CircularProgress value={progress} size=\"lg\" />\n    <div className=\"flex gap-2\">\n      <button\n        onClick={handleReset}\n        className=\"px-4 py-2 bg-primary text-primary-foreground rounded-md text-sm hover:bg-primary/90\"\n      >\n        {isLoading ? \"Loading...\" : \"Reset\"}\n      </button>\n    </div>\n  </div>\n);\n}`,children:(0,r.jsx)(a,{})}),`\n`,(0,r.jsxs)(e.h2,{id:\"api-reference\",children:[(0,r.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#api-reference\",children:(0,r.jsx)(e.span,{className:\"icon icon-link\"})}),\"API Reference\"]}),`\n`,(0,r.jsxs)(e.h3,{id:\"circularprogress\",children:[(0,r.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#circularprogress\",children:(0,r.jsx)(e.span,{className:\"icon icon-link\"})}),\"CircularProgress\"]}),`\n`,(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:\"Prop\"}),(0,r.jsx)(e.th,{children:\"Type\"}),(0,r.jsx)(e.th,{children:\"Default\"}),(0,r.jsx)(e.th,{children:\"Description\"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"value\"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"number\"})}),(0,r.jsx)(e.td,{children:\"-\"}),(0,r.jsx)(e.td,{children:\"The progress value (0-100)\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"size\"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:'\"sm\" | \"default\" | \"lg\" | \"xl\"'})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:'\"default\"'})}),(0,r.jsx)(e.td,{children:\"The size of the circular progress indicator\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"strokeWidth\"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"number\"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"6\"})}),(0,r.jsx)(e.td,{children:\"The width of the progress ring stroke\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"showValue\"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"boolean\"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"true\"})}),(0,r.jsx)(e.td,{children:\"Whether to display the percentage value in the center\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"duration\"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"number\"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"1\"})}),(0,r.jsx)(e.td,{children:\"Animation duration in seconds for progress changes\"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"className\"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:\"string\"})}),(0,r.jsx)(e.td,{children:\"-\"}),(0,r.jsx)(e.td,{children:\"Additional CSS classes to apply to the component\"})]})]})]}),`\n`,(0,r.jsxs)(e.p,{children:[\"The component also accepts all standard HTML \",(0,r.jsx)(e.code,{children:\"div\"}),\" attributes.\"]}),`\n`,(0,r.jsxs)(e.h2,{id:\"accessibility\",children:[(0,r.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#accessibility\",children:(0,r.jsx)(e.span,{className:\"icon icon-link\"})}),\"Accessibility\"]}),`\n`,(0,r.jsx)(e.p,{children:\"The CircularProgress component includes built-in accessibility features:\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"ARIA attributes\"}),\": Proper \",(0,r.jsx)(e.code,{children:\"role\"}),\" and \",(0,r.jsx)(e.code,{children:\"aria-*\"}),\" attributes for screen readers\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"Semantic structure\"}),\": Uses semantic HTML elements where appropriate\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"Keyboard navigation\"}),\": Focusable when interactive\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"Screen reader support\"}),\": Progress value is announced to assistive technologies\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"High contrast\"}),\": Respects system color preferences and theme settings\"]}),`\n`]}),`\n`,(0,r.jsxs)(e.h2,{id:\"examples-in-the-wild\",children:[(0,r.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#examples-in-the-wild\",children:(0,r.jsx)(e.span,{className:\"icon icon-link\"})}),\"Examples in the Wild\"]}),`\n`,(0,r.jsx)(e.p,{children:\"Here are some common use cases for the CircularProgress component:\"}),`\n`,(0,r.jsxs)(e.h3,{id:\"file-upload-progress\",children:[(0,r.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#file-upload-progress\",children:(0,r.jsx)(e.span,{className:\"icon icon-link\"})}),\"File Upload Progress\"]}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-tsx\",children:`<CircularProgress \n  value={uploadProgress} \n  size=\"lg\" \n  strokeWidth={8}\n/>\n`})}),`\n`,(0,r.jsxs)(e.h3,{id:\"loading-spinner\",children:[(0,r.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#loading-spinner\",children:(0,r.jsx)(e.span,{className:\"icon icon-link\"})}),\"Loading Spinner\"]}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-tsx\",children:`<CircularProgress \n  value={loadingProgress} \n  showValue={false}\n  duration={0.5}\n/>\n`})}),`\n`,(0,r.jsxs)(e.h3,{id:\"dashboard-metrics\",children:[(0,r.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#dashboard-metrics\",children:(0,r.jsx)(e.span,{className:\"icon icon-link\"})}),\"Dashboard Metrics\"]}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-tsx\",children:`<div className=\"grid grid-cols-3 gap-4\">\n  <CircularProgress value={85} size=\"sm\" />\n  <CircularProgress value={92} size=\"sm\" />\n  <CircularProgress value={78} size=\"sm\" />\n</div>\n`})}),`\n`,(0,r.jsxs)(e.h3,{id:\"skill-level-indicators\",children:[(0,r.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#skill-level-indicators\",children:(0,r.jsx)(e.span,{className:\"icon icon-link\"})}),\"Skill Level Indicators\"]}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-tsx\",children:`<CircularProgress \n  value={skillLevel} \n  size=\"xl\" \n  strokeWidth={12}\n/>\n`})})]})}function f(s={}){let{wrapper:e}=s.components||{};return e?(0,r.jsx)(e,{...s,children:(0,r.jsx)(p,{...s})}):p(s)}function l(s,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+s+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return y(z);})();\n;return Component;"
  },
  "_id": "docs/components/circular-progress.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/circular-progress.mdx",
    "sourceFileName": "circular-progress.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/circular-progress"
  },
  "type": "Doc",
  "slug": "/docs/components/circular-progress",
  "slugAsParams": "components/circular-progress"
}