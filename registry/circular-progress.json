{
  "name": "circular-progress",
  "type": "components:ui",
  "dependencies": [
    "framer-motion",
    "class-variance-authority",
    "clsx",
    "tailwind-merge"
  ],
  "registryDependencies": [],
  "files": [
    {
      "name": "circular-progress.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  motion,\n  useMotionValue,\n  useTransform,\n  animate,\n  MotionValue,\n} from \"framer-motion\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst circularProgressVariants = cva(\n  \"relative flex items-center justify-center\",\n  {\n    variants: {\n      size: {\n        sm: \"w-16 h-16\",\n        default: \"w-24 h-24\", \n        lg: \"w-32 h-32\",\n        xl: \"w-40 h-40\",\n      },\n    },\n    defaultVariants: {\n      size: \"default\",\n    },\n  }\n);\n\ninterface CircularProgressProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof circularProgressVariants> {\n  value: number; // Progress value (0â€“100)\n  strokeWidth?: number;\n  showValue?: boolean;\n  duration?: number;\n}\n\nconst CircularProgress = React.forwardRef<\n  HTMLDivElement,\n  CircularProgressProps\n>(({ \n  className,\n  value, \n  size,\n  strokeWidth = 6,\n  showValue = true,\n  duration = 1,\n  ...props \n}, ref) => {\n  // Get size dimensions based on variant\n  const sizeMap = {\n    sm: 64,\n    default: 96,\n    lg: 128,\n    xl: 160,\n  };\n  \n  const actualSize = sizeMap[size || \"default\"];\n  const radius = (actualSize - strokeWidth) / 2;\n  const circumference = 2 * Math.PI * radius;\n\n  // Animated motion values\n  const progress: MotionValue<number> = useMotionValue(0);\n  const strokeOffset = useTransform(progress, (latest) => {\n    const pct = Math.min(Math.max(latest, 0), 100);\n    return circumference - (pct / 100) * circumference;\n  });\n\n  // Local state for number display (because MotionValue can't render directly)\n  const [displayValue, setDisplayValue] = React.useState(0);\n\n  React.useEffect(() => {\n    const controls = animate(progress, value, {\n      duration,\n      ease: \"easeInOut\",\n    });\n\n    const unsubscribe = progress.on(\"change\", (latest) => {\n      setDisplayValue(Math.round(latest));\n    });\n\n    return () => {\n      controls.stop();\n      unsubscribe();\n    };\n  }, [value, duration, progress]);\n\n  return (\n    <div\n      ref={ref}\n      className={cn(circularProgressVariants({ size }), className)}\n      style={{ width: actualSize, height: actualSize }}\n      {...props}\n    >\n      <svg \n        width={actualSize} \n        height={actualSize} \n        className=\"-rotate-90 transform\"\n      >\n        {/* Background circle */}\n        <circle\n          stroke=\"hsl(var(--muted))\"\n          fill=\"transparent\"\n          strokeWidth={strokeWidth}\n          r={radius}\n          cx={actualSize / 2}\n          cy={actualSize / 2}\n        />\n        {/* Animated progress circle */}\n        <motion.circle\n          stroke=\"hsl(var(--primary))\"\n          fill=\"transparent\"\n          strokeWidth={strokeWidth}\n          strokeLinecap=\"round\"\n          strokeDasharray={circumference}\n          style={{ strokeDashoffset: strokeOffset }}\n          r={radius}\n          cx={actualSize / 2}\n          cy={actualSize / 2}\n        />\n      </svg>\n\n      {/* Dynamic numeric label */}\n      {showValue && (\n        <span className=\"absolute select-none text-sm font-medium text-foreground\">\n          {displayValue}%\n        </span>\n      )}\n    </div>\n  );\n});\n\nCircularProgress.displayName = \"CircularProgress\";\n\nexport { CircularProgress };"
    }
  ]
}