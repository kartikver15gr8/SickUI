{
  "name": "calendar",
  "dependencies": [
    "framer-motion",
    "@emotion/is-prop-valid",
    "lucide-react",
    "class-variance-authority",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "name": "calendar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst calendarVariants = cva(\n  \"w-full max-w-sm rounded-lg bg-card p-4\"\n);\n\nexport interface CalendarProps extends React.HTMLAttributes<HTMLDivElement> {\n  selectedDate?: Date;\n  onDateSelect?: (date: Date) => void;\n  disabled?: boolean;\n  showAnimation?: boolean;\n}\n\nconst Calendar = React.forwardRef<HTMLDivElement, CalendarProps>(\n  (\n    {\n      className,\n      selectedDate,\n      onDateSelect,\n      disabled = false,\n      showAnimation = true,\n      ...props\n    },\n    ref\n  ) => {\n    const today = new Date();\n    const [currentMonth, setCurrentMonth] = React.useState(\n      new Date(today.getFullYear(), today.getMonth(), 1)\n    );\n    const [showMonthYearPicker, setShowMonthYearPicker] = React.useState(false);\n\n    const month = currentMonth.toLocaleDateString(\"en-US\", { month: \"long\" });\n    const year = currentMonth.getFullYear();\n\n    // Close popup when clicking outside\n    React.useEffect(() => {\n      const handleClickOutside = (event: MouseEvent) => {\n        if (showMonthYearPicker && ref && \"current\" in ref && ref.current) {\n          const target = event.target as Node;\n          if (!ref.current.contains(target)) {\n            setShowMonthYearPicker(false);\n          }\n        }\n      };\n\n      if (showMonthYearPicker) {\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () =>\n          document.removeEventListener(\"mousedown\", handleClickOutside);\n      }\n    }, [showMonthYearPicker, ref]);\n\n    // Days of week labels\n    const weekdays = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\n    // Get days for current month\n    const daysInMonth = new Date(\n      year,\n      currentMonth.getMonth() + 1,\n      0\n    ).getDate();\n    const startDay = currentMonth.getDay();\n    const daysArray = Array.from({ length: daysInMonth }, (_, i) => i + 1);\n\n    // Handle prev/next month\n    const changeMonth = (offset: number) => {\n      if (disabled) return;\n      setCurrentMonth(new Date(year, currentMonth.getMonth() + offset, 1));\n    };\n\n    const handleDateSelect = (date: Date) => {\n      if (disabled || !onDateSelect) return;\n      onDateSelect(date);\n    };\n\n    const CalendarWrapper = showAnimation ? motion.div : \"div\";\n    const animationProps = showAnimation\n      ? {\n          initial: { opacity: 0, y: 20 },\n          animate: { opacity: 1, y: 0 },\n        }\n      : {};\n\n    return (\n      <CalendarWrapper\n        ref={ref}\n        className={cn(calendarVariants(), \"relative\", className)}\n        {...(animationProps as any)}\n        {...props}\n      >\n        {/* Header with navigation */}\n        <div className=\"mb-4 flex items-center justify-between\">\n          <button\n            onClick={() => changeMonth(-1)}\n            disabled={disabled}\n            className={cn(\n              \"rounded-full p-1 transition-colors\",\n              disabled\n                ? \"cursor-not-allowed opacity-50\"\n                : \"hover:bg-accent hover:text-accent-foreground\"\n            )}\n          >\n            <ChevronLeft className=\"h-5 w-5\" />\n          </button>\n          {showAnimation ? (\n            <motion.button\n              key={month + year}\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: 10 }}\n              className=\"font-semibold text-lg text-foreground hover:bg-accent hover:text-accent-foreground rounded px-3 py-1 transition-colors\"\n              onClick={() => setShowMonthYearPicker(true)}\n              disabled={disabled}\n            >\n              {month} {year}\n            </motion.button>\n          ) : (\n            <button \n              className=\"font-semibold text-lg text-foreground hover:bg-accent hover:text-accent-foreground rounded px-3 py-1 transition-colors\"\n              onClick={() => setShowMonthYearPicker(true)}\n              disabled={disabled}\n            >\n              {month} {year}\n            </button>\n          )}\n          <button\n            onClick={() => changeMonth(1)}\n            disabled={disabled}\n            className={cn(\n              \"rounded-full p-1 transition-colors\",\n              disabled\n                ? \"cursor-not-allowed opacity-50\"\n                : \"hover:bg-accent hover:text-accent-foreground\"\n            )}\n          >\n            <ChevronRight className=\"h-5 w-5\" />\n          </button>\n        </div>\n\n        {/* Month/Year Picker Popup */}\n        {showMonthYearPicker && (\n          <div className=\"absolute top-0 left-0 right-0 bg-card border border-border rounded-lg p-4 z-20 shadow-lg\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"font-semibold text-foreground\">\n                Select Month & Year\n              </h3>\n              <button\n                onClick={() => setShowMonthYearPicker(false)}\n                className=\"text-muted-foreground hover:text-foreground\"\n              >\n                âœ•\n              </button>\n            </div>\n\n            {/* Year Selection */}\n            <div className=\"flex items-center justify-between mb-4\">\n              <button\n                onClick={() =>\n                  setCurrentMonth(\n                    new Date(year - 1, currentMonth.getMonth(), 1)\n                  )\n                }\n                className=\"p-2 hover:bg-accent hover:text-accent-foreground rounded transition-colors\"\n                disabled={disabled}\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </button>\n              <span className=\"font-semibold text-lg\">{year}</span>\n              <button\n                onClick={() =>\n                  setCurrentMonth(\n                    new Date(year + 1, currentMonth.getMonth(), 1)\n                  )\n                }\n                className=\"p-2 hover:bg-accent hover:text-accent-foreground rounded transition-colors\"\n                disabled={disabled}\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </button>\n            </div>\n\n            {/* Month Selection Grid */}\n            <div className=\"grid grid-cols-3 gap-2 mb-4\">\n              {Array.from({ length: 12 }, (_, i) => {\n                const monthDate = new Date(year, i, 1);\n                const monthName = monthDate.toLocaleDateString(\"en-US\", {\n                  month: \"short\",\n                });\n                const isCurrentMonth = i === currentMonth.getMonth();\n\n                return (\n                  <button\n                    key={i}\n                    onClick={() => {\n                      setCurrentMonth(new Date(year, i, 1));\n                      setShowMonthYearPicker(false);\n                    }}\n                    disabled={disabled}\n                    className={cn(\n                      \"p-2 text-sm rounded-lg transition-colors\",\n                      isCurrentMonth\n                        ? \"bg-black dark:bg-white text-primary-foreground\"\n                        : \"hover:bg-accent hover:text-accent-foreground\"\n                    )}\n                  >\n                    {monthName}\n                  </button>\n                );\n              })}\n            </div>\n\n            {/* Close Button */}\n            <button\n              onClick={() => setShowMonthYearPicker(false)}\n              className=\"w-full p-2 bg-black dark:bg-white text-primary-foreground rounded-lg hover:bg-black/80 dark:hover:bg-white/80 transition-colors\"\n            >\n              Done\n            </button>\n          </div>\n        )}\n\n        {/* Weekday labels */}\n        <div className=\"mb-2 grid grid-cols-7 text-center text-xs font-medium text-muted-foreground mt-2\">\n          {weekdays.map((d) => (\n            <div key={d}>{d}</div>\n          ))}\n        </div>\n\n        {/* Calendar grid */}\n        <div className=\"grid grid-cols-7 gap-1 text-center text-sm\">\n          {/* Empty slots before first day */}\n          {Array.from({ length: startDay }).map((_, i) => (\n            <div key={\"empty-\" + i}></div>\n          ))}\n\n          {showAnimation ? (\n            <AnimatePresence mode=\"popLayout\">\n              {daysArray.map((day) => {\n                const date = new Date(year, currentMonth.getMonth(), day);\n                const isToday = date.toDateString() === today.toDateString();\n                const isSelected =\n                  selectedDate &&\n                  date.toDateString() === selectedDate.toDateString();\n\n                return (\n                  <motion.button\n                    key={day}\n                    layout\n                    whileHover={disabled ? {} : { scale: 1.1 }}\n                    whileTap={disabled ? {} : { scale: 0.95 }}\n                    onClick={() => handleDateSelect(date)}\n                    disabled={disabled}\n                    className={cn(\n                      \"flex h-10 w-10 items-center justify-center rounded-full transition-colors\",\n                      disabled && \"cursor-not-allowed opacity-50\",\n                      isSelected\n                        ? \"bg-black text-white dark:bg-white dark:text-black\"\n                        : isToday\n                        ? \"border border-black text-black dark:border-white dark:text-white\"\n                        : \"text-foreground hover:bg-accent hover:text-accent-foreground\"\n                    )}\n                  >\n                    {day}\n                  </motion.button>\n                );\n              })}\n            </AnimatePresence>\n          ) : (\n            <>\n              {daysArray.map((day) => {\n                const date = new Date(year, currentMonth.getMonth(), day);\n                const isToday = date.toDateString() === today.toDateString();\n                const isSelected =\n                  selectedDate &&\n                  date.toDateString() === selectedDate.toDateString();\n\n                return (\n                  <button\n                    key={day}\n                    onClick={() => handleDateSelect(date)}\n                    disabled={disabled}\n                    className={cn(\n                      \"flex h-10 w-10 items-center justify-center rounded-full transition-colors\",\n                      disabled && \"cursor-not-allowed opacity-50\",\n                      isSelected\n                        ? \"bg-primary text-primary-foreground\"\n                        : isToday\n                        ? \"border border-primary text-primary\"\n                        : \"text-foreground hover:bg-accent hover:text-accent-foreground\"\n                    )}\n                  >\n                    {day}\n                  </button>\n                );\n              })}\n            </>\n          )}\n        </div>\n      </CalendarWrapper>\n    );\n  }\n);\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar, calendarVariants };"
    }
  ],
  "type": "components:ui"
}